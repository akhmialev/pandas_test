import datetime
import locale

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, CallbackGame
from test_data import trainers, TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


async def on_startup(_):
    print("–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")


def record_to_db(dct):
    print(dct)


def create_dct_for_db(date):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—å—è —Å–ª–æ–≤–∞—Ä—è, —á—Ç–æ –±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –ë–î
    :param date: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        trainer - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —Ç–µ—Ä–µ–Ω–∞
        training_time - –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
        training_date - –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
    """
    trainer, training_time, training_date = date
    trainer = trainer.split(' ')
    training_date = '.'.join(training_date.split('.')[1:])
    dct = {
        'name': trainer[0],
        'lname': trainer[1],
        'time': training_time,
        'training_date': training_date

    }
    record_to_db(dct)


def get_mount_right_case():
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞–≤–∏—Ç –º–µ—Å—è—Ü –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
    """
    mount = ['–Ø–Ω–≤–∞—Ä–µ', '–§–µ–≤—Ä–∞–ª–µ', '–ú–∞—Ä—Ç–µ', '–ê–ø—Ä–µ–ª–µ', '–ú–∞–µ', '–ò—é–Ω–µ', '–ò—é–ª–µ', '–ê–≤–≥—É—Å—Ç–µ', '–°–µ–Ω—Ç—è–±—Ä–µ', '–û–∫—Ç—è–±—Ä–µ', '–ù–æ—è–±—Ä–µ',
             '–î–µ–∫–∞–±—Ä–µ']

    now = datetime.datetime.now()
    mount = mount[now.month - 1]
    return now, mount


def get_week_date(tr_id):
    """
    –§—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ –µ–≥–æ id
    :param tr_id: id —Ç—Ä–µ–Ω–µ—Ä–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞—Ç
    """
    for trainer in trainers:
        if trainer['id'] == int(tr_id):
            return trainer['week_day']


user_activiti_day = {}


@dp.message_handler(commands='start')
async def menu(msg: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    b1 = KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å_–∑–∞–ø–∏—Å—å')
    b2 = KeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è')
    kb.add(b2, b1)
    await bot.send_message(chat_id=msg.from_user.id, text='–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä', reply_markup=kb)


@dp.message_handler()
async def send_choice_all_trainers(msg: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    :param msg:
    :return:
    """
    if '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in msg.text.lower():
        # –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥ –∏ –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤(—è –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ trainers —Å dict)
        trainers_button = []
        for element in trainers:
            name = element['name']
            lname = element['lname']
            tr_id = element['id']
            fullname = name + ' ' + lname
            button = InlineKeyboardButton(text=fullname, callback_data=f"trainer_{fullname}_{tr_id}")
            trainers_button.append(button)
        ikb = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
        ikb.add(*trainers_button)
        await bot.send_message(chat_id=msg.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞', reply_markup=ikb)
    else:
        """
            –∑–¥–µ—Å—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        """


@dp.callback_query_handler(lambda c: c.data.startswith('trainer_'))
async def calendar_record_trainers(cb: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ä–∞–±–æ—á–∏–µ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞.
    :param cb: coll back –¥–∞—Ç–∞ —Ç—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞(—Ç–µ—Ä–µ–Ω–∞), –º—ã –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ –ë–î –µ–≥–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –≤—ã–≤–æ–¥–∏–º
    –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å + 28 –¥–Ω–µ–π
    """

    # —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∏—Ä—É—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å + 4 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

    trainer = cb.data.split('_')[1]
    tr_id = cb.data.split('_')[2]
    calendar_msg = f"–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è —Å {trainer}:"

    today = datetime.datetime.today()
    end_data = today + datetime.timedelta(days=28)
    week_days = get_week_date(tr_id)
    buttons = []
    while today <= end_data:
        comparison = today.strftime('%d.%m')
        button_text = today.strftime('%a %d.%m')
        if comparison not in week_days:
            buttons.append(InlineKeyboardButton(text=button_text,
                                                callback_data=f'record_{today.strftime("%d.%m.%y")}_{trainer}'))
        else:
            buttons.append(InlineKeyboardButton(text='üö´',
                                                callback_data=f'week_{button_text}_{trainer}'))
        today += datetime.timedelta(days=1)

    ikb = InlineKeyboardMarkup(row_width=4)
    ikb.add(*buttons)
    await bot.send_message(chat_id=cb.from_user.id, text=calendar_msg, reply_markup=ikb)


@dp.callback_query_handler(lambda c: c.data.startswith('record_'))
async def send_time_for_record(cb: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    """
    list_data = cb.data.split('_')
    date = list_data[1]
    trainer = list_data[2]

    text_message = f'–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ {trainer}:'
    ikb = InlineKeyboardMarkup()
    buttons = []
    for hour in range(7, 24):
        start_time = f'{hour:02d}:00'
        end_time = f'{hour + 1:02d}:00'
        training_time = f"{start_time} - {end_time}"
        buttons.append(
            InlineKeyboardButton(text=training_time, callback_data=f'finish record_{date}_{training_time}_{trainer}'))
    ikb.add(*buttons)

    await bot.send_message(chat_id=cb.from_user.id, text=text_message, reply_markup=ikb)


@dp.callback_query_handler(lambda c: c.data.startswith('finish '))
async def finish_record_and_add_to_db(cd: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    """
    user_id = cd.from_user.id
    if user_id in user_activiti_day and user_activiti_day[user_id] == datetime.datetime.now().date():
        await bot.send_message(chat_id=cd.from_user.id, text='–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã')

    list_data = cd.data.split('_')
    trainer = list_data[3]
    training_time = list_data[2]
    training_date = list_data[1]
    text_message = f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã {training_date} –∫ —Ç—Ä–µ–Ω–µ—Ä—É {trainer} –Ω–∞ –≤—Ä–µ–º—è {training_time}'

    await bot.send_message(chat_id=cd.from_user.id, text=text_message)
    user_activiti_day[user_id] = datetime.datetime.now().date()
    print(user_activiti_day)
    data = trainer, training_time, training_date
    create_dct_for_db(data)


@dp.callback_query_handler(lambda c: c.data.startswith('week_'))
async def send_record_time(cb: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –ø—ã—Ç–∞—é—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å
    """
    list_data = cb.data.split('_')
    status = list_data[0]
    week_day = list_data[1]
    trainer = list_data[2]

    if status == 'week':
        await bot.answer_callback_query(callback_query_id=cb.id, text=f'–£ {trainer} {week_day} –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
